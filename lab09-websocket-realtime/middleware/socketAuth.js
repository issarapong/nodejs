/**
 * Socket Authentication Middleware
 * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WebSocket connections
 */

const jwt = require('jsonwebtoken');
const User = require('../models/User');

/**
 * Socket.io Authentication Middleware
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
 */
const socketAuth = async (socket, next) => {
  try {
    // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å query parameters ‡∏´‡∏£‡∏∑‡∏≠ auth header
    const token = socket.handshake.auth.token || 
                  socket.handshake.query.token ||
                  socket.handshake.headers.authorization?.replace('Bearer ', '');

    if (!token) {
      console.log(`‚ùå Socket ${socket.id}: No authentication token provided`);
      return next(new Error('Authentication token required'));
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const user = await User.findById(decoded.id)
      .select('-password -emailVerificationToken -passwordResetToken');

    if (!user) {
      console.log(`‚ùå Socket ${socket.id}: User not found for ID ${decoded.id}`);
      return next(new Error('User not found'));
    }

    if (user.status !== 'active') {
      console.log(`‚ùå Socket ${socket.id}: User ${user.username} is not active (status: ${user.status})`);
      return next(new Error('User account is not active'));
    }

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô socket object
    socket.userId = user._id.toString();
    socket.user = user;
    socket.username = user.username;
    socket.roles = user.roles;

    console.log(`‚úÖ Socket ${socket.id}: Authenticated user ${user.username} (${user._id})`);
    
    next();

  } catch (error) {
    console.log(`‚ùå Socket ${socket.id}: Authentication failed - ${error.message}`);
    
    if (error.name === 'JsonWebTokenError') {
      return next(new Error('Invalid authentication token'));
    } else if (error.name === 'TokenExpiredError') {
      return next(new Error('Authentication token expired'));
    } else {
      return next(new Error('Authentication failed'));
    }
  }
};

/**
 * Socket Room Authorization Middleware
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á
 */
const socketRoomAuth = (requiredPermission = null) => {
  return async (socket, roomId, next) => {
    try {
      const Room = require('../models/Room');
      
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á
      const room = await Room.findById(roomId);
      if (!room) {
        return next(new Error('Room not found'));
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
      if (room.status !== 'active') {
        return next(new Error('Room is not active'));
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (room.isBanned(socket.userId)) {
        return next(new Error('You are banned from this room'));
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏†‡∏≤‡∏û
      const isMember = room.isMember(socket.userId);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      if (room.isPrivate && !isMember) {
        return next(new Error('Access denied to private room'));
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (requiredPermission && isMember) {
        if (!room.hasPermission(socket.userId, requiredPermission)) {
          return next(new Error(`Permission denied: ${requiredPermission}`));
        }
      }

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô socket
      socket.currentRoom = room;
      socket.roomRole = room.getMemberRole(socket.userId);

      console.log(`‚úÖ Socket ${socket.id}: Authorized for room ${room.name} (${roomId})`);
      
      next();

    } catch (error) {
      console.log(`‚ùå Socket ${socket.id}: Room authorization failed - ${error.message}`);
      next(new Error('Room authorization failed'));
    }
  };
};

/**
 * Socket Rate Limiting Middleware
 * ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 */
const socketRateLimit = (options = {}) => {
  const {
    maxRequests = 30,
    windowMs = 60000, // 1 minute
    message = 'Too many requests'
  } = options;

  const requestCounts = new Map();

  return (socket, next) => {
    const userId = socket.userId;
    const now = Date.now();
    const windowStart = now - windowMs;

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    if (requestCounts.has(userId)) {
      const userRequests = requestCounts.get(userId);
      userRequests.requests = userRequests.requests.filter(time => time > windowStart);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô requests ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const userRequests = requestCounts.get(userId) || { requests: [] };
    
    if (userRequests.requests.length >= maxRequests) {
      console.log(`üö´ Socket ${socket.id}: Rate limit exceeded for user ${socket.username}`);
      return next(new Error(message));
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å request
    userRequests.requests.push(now);
    requestCounts.set(userId, userRequests);

    next();
  };
};

/**
 * Socket Admin Authorization Middleware
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
 */
const socketAdminAuth = (socket, next) => {
  if (!socket.user || !socket.user.roles.includes('admin')) {
    console.log(`‚ùå Socket ${socket.id}: Admin access denied for user ${socket.username}`);
    return next(new Error('Admin access required'));
  }

  console.log(`‚úÖ Socket ${socket.id}: Admin access granted for user ${socket.username}`);
  next();
};

/**
 * Socket Moderator Authorization Middleware
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå moderator ‡∏´‡∏£‡∏∑‡∏≠ admin
 */
const socketModeratorAuth = (socket, next) => {
  const userRoles = socket.user?.roles || [];
  const hasModeratorAccess = userRoles.includes('moderator') || userRoles.includes('admin');

  if (!hasModeratorAccess) {
    console.log(`‚ùå Socket ${socket.id}: Moderator access denied for user ${socket.username}`);
    return next(new Error('Moderator access required'));
  }

  console.log(`‚úÖ Socket ${socket.id}: Moderator access granted for user ${socket.username}`);
  next();
};

/**
 * Socket Validation Middleware
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
const socketValidation = {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  message: (socket, data, next) => {
    const { roomId, content, type = 'text' } = data;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required fields
    if (!roomId) {
      return next(new Error('Room ID is required'));
    }

    if (!content && type === 'text') {
      return next(new Error('Message content is required'));
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (content && content.length > 1000) {
      return next(new Error('Message too long (max 1000 characters)'));
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const allowedTypes = ['text', 'image', 'file', 'audio', 'video', 'emoji'];
    if (!allowedTypes.includes(type)) {
      return next(new Error('Invalid message type'));
    }

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
    if (content) {
      data.content = content.trim();
    }

    next();
  },

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á
  room: (socket, data, next) => {
    const { name, description, type = 'group' } = data;

    if (!name || name.trim().length === 0) {
      return next(new Error('Room name is required'));
    }

    if (name.length > 100) {
      return next(new Error('Room name too long (max 100 characters)'));
    }

    if (description && description.length > 500) {
      return next(new Error('Room description too long (max 500 characters)'));
    }

    const allowedTypes = ['private', 'group', 'public', 'channel'];
    if (!allowedTypes.includes(type)) {
      return next(new Error('Invalid room type'));
    }

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    data.name = name.trim();
    if (description) {
      data.description = description.trim();
    }

    next();
  }
};

/**
 * Socket Error Handler
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ errors ‡πÉ‡∏ô socket middleware
 */
const socketErrorHandler = (error, socket, next) => {
  console.error(`üî¥ Socket ${socket.id} Error:`, error.message);
  
  // ‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
  socket.emit('error', {
    message: error.message,
    code: error.code || 'SOCKET_ERROR',
    timestamp: new Date().toISOString()
  });

  // ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å next() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
};

module.exports = {
  socketAuth,
  socketRoomAuth,
  socketRateLimit,
  socketAdminAuth,
  socketModeratorAuth,
  socketValidation,
  socketErrorHandler
};