/**
 * ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB
 * Database Configuration for MongoDB connection
 */

const mongoose = require('mongoose');
require('dotenv').config();

class Database {
  constructor() {
    this.mongodb_uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/nodejs-lab';
    this.options = {
      // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      maxPoolSize: 10, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô connection ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô pool
      serverSelectionTimeoutMS: 5000, // Timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å server
      socketTimeoutMS: 45000, // Socket timeout
      bufferCommands: false // ‡∏õ‡∏¥‡∏î mongoose buffer commands
    };
  }

  /**
   * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
   */
  async connect() {
    try {
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB...');
      console.log(`üìç Database URI: ${this.mongodb_uri.replace(/\/\/([^:]+):([^@]+)@/, '//***:***@')}`);
      
      const connection = await mongoose.connect(this.mongodb_uri, this.options);
      
      console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      console.log(`üìä Database Name: ${connection.connection.name}`);
      console.log(`üåê Host: ${connection.connection.host}:${connection.connection.port}`);
      
      // Event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitoring
      this.setupEventListeners();
      
      return connection;
    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB:', error.message);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
      this.showTroubleshootingTips(error);
      
      // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ ‡∏´‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      process.exit(1);
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitoring
   */
  setupEventListeners() {
    const connection = mongoose.connection;

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    connection.on('connected', () => {
      console.log('üü¢ Mongoose connected to MongoDB');
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    connection.on('error', (error) => {
      console.error('üî¥ Mongoose connection error:', error);
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
    connection.on('disconnected', () => {
      console.log('üü° Mongoose disconnected from MongoDB');
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ reconnect ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    connection.on('reconnected', () => {
      console.log('üü¢ Mongoose reconnected to MongoDB');
    });

    // Handle process termination
    process.on('SIGINT', async () => {
      await this.disconnect();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      await this.disconnect();
      process.exit(0);
    });
  }

  /**
   * ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  async disconnect() {
    try {
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB...');
      await mongoose.connection.close();
      console.log('‚úÖ ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:', error.message);
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
   */
  getConnectionStatus() {
    const states = {
      0: 'disconnected',
      1: 'connected',
      2: 'connecting',
      3: 'disconnecting'
    };
    
    const state = mongoose.connection.readyState;
    return {
      state: states[state] || 'unknown',
      host: mongoose.connection.host,
      port: mongoose.connection.port,
      name: mongoose.connection.name
    };
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
   */
  async getStats() {
    try {
      const admin = mongoose.connection.db.admin();
      const stats = await admin.serverStatus();
      
      return {
        mongodb_version: stats.version,
        uptime: stats.uptime,
        connections: stats.connections,
        memory: stats.mem,
        network: stats.network
      };
    } catch (error) {
      console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
      return null;
    }
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
   */
  showTroubleshootingTips(error) {
    console.log('\nüîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:');
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('‚Ä¢ MongoDB Server ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏° MongoDB Service');
      console.log('‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PORT ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô connection string');
      console.log('‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ MongoDB Atlas (Cloud Database)');
    }
    
    if (error.message.includes('authentication failed')) {
      console.log('‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡πÅ‡∏•‡∏∞ password ‡πÉ‡∏ô connection string');
      console.log('‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
    
    if (error.message.includes('network timeout')) {
      console.log('‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ network');
      console.log('‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
    }
    
    console.log('‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏ß‡πà‡∏≤‡∏°‡∏µ MONGODB_URI ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    console.log('‚Ä¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ: docker run -d -p 27017:27017 mongo:latest\n');
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing)
   */
  async clearDatabase() {
    if (process.env.NODE_ENV === 'production') {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô production mode');
    }
    
    try {
      const collections = await mongoose.connection.db.collections();
      
      for (let collection of collections) {
        await collection.drop();
      }
      
      console.log('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Indexes ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
   */
  async createIndexes() {
    try {
      console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Database Indexes...');
      
      // User indexes
      await mongoose.connection.collection('users').createIndex({ email: 1 }, { unique: true });
      await mongoose.connection.collection('users').createIndex({ username: 1 }, { unique: true });
      
      // Product indexes
      await mongoose.connection.collection('products').createIndex({ name: 'text', description: 'text' });
      await mongoose.connection.collection('products').createIndex({ category: 1 });
      await mongoose.connection.collection('products').createIndex({ price: 1 });
      
      // Order indexes
      await mongoose.connection.collection('orders').createIndex({ userId: 1 });
      await mongoose.connection.collection('orders').createIndex({ createdAt: -1 });
      await mongoose.connection.collection('orders').createIndex({ status: 1 });
      
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Indexes ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á indexes:', error.message);
    }
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (Singleton pattern)
const database = new Database();

module.exports = {
  database,
  mongoose
};