/**
 * Seed Database - Advanced Authentication Lab
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */

const mongoose = require('mongoose');
require('dotenv').config();

// Models
const User = require('../models/User');
const RefreshToken = require('../models/RefreshToken');

// Services
const database = require('../config/database');

/**
 * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
 */
const sampleUsers = [
  {
    username: 'admin',
    email: 'admin@example.com',
    password: 'AdminPassword123!',
    firstName: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•',
    lastName: '‡∏£‡∏∞‡∏ö‡∏ö',
    roles: ['user', 'admin'],
    permissions: [
      'read:users', 'write:users', 'delete:users',
      'read:products', 'write:products', 'delete:products',
      'read:orders', 'write:orders', 'delete:orders',
      'read:reports', 'write:reports',
      'manage:system', 'manage:users', 'manage:roles'
    ],
    status: 'active',
    isEmailVerified: true
  },
  {
    username: 'moderator',
    email: 'moderator@example.com',
    password: 'ModeratorPass123!',
    firstName: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•',
    lastName: '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤',
    roles: ['user', 'moderator'],
    permissions: [
      'read:users', 'read:products', 'write:products',
      'read:orders', 'write:orders',
      'read:reports'
    ],
    status: 'active',
    isEmailVerified: true
  },
  {
    username: 'user1',
    email: 'user1@example.com',
    password: 'UserPassword123!',
    firstName: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    lastName: '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ 1',
    roles: ['user'],
    permissions: ['read:products', 'read:orders'],
    status: 'active',
    isEmailVerified: true,
    phone: '0812345678'
  },
  {
    username: 'user2',
    email: 'user2@example.com',
    password: 'UserPassword123!',
    firstName: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    lastName: '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ 2',
    roles: ['user'],
    permissions: ['read:products', 'read:orders'],
    status: 'active',
    isEmailVerified: true,
    mfaEnabled: true, // MFA enabled user
    phone: '0823456789'
  },
  {
    username: 'inactive_user',
    email: 'inactive@example.com',
    password: 'InactivePass123!',
    firstName: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    lastName: '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
    roles: ['user'],
    status: 'inactive',
    isEmailVerified: false
  },
  {
    username: 'pending_user',
    email: 'pending@example.com',
    password: 'PendingPass123!',
    firstName: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    lastName: '‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
    roles: ['user'],
    status: 'pending',
    isEmailVerified: false
  }
];

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
 */
async function seedUsers() {
  try {
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...');
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    await User.deleteMany({});
    console.log('üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πà‡∏≤');
    
    const createdUsers = [];
    
    for (const userData of sampleUsers) {
      try {
        const user = new User(userData);
        
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MFA user ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MFA secret
        if (userData.mfaEnabled) {
          const secret = user.generateMFASecret();
          user.mfaSecret = secret.base32;
          user.generateMFABackupCodes();
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏°
        user.lastLogin = new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000);
        user.lastLoginIP = `192.168.1.${Math.floor(Math.random() * 100) + 1}`;
        user.lastLoginUserAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36';
        
        await user.save();
        createdUsers.push(user);
        
        console.log(`   ‚Ä¢ ${user.username} (${user.roles.join(', ')}) - ${user.email}`);
        
      } catch (error) {
        console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userData.username}:`, error.message);
      }
    }
    
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${createdUsers.length} ‡∏Ñ‡∏ô`);
    return createdUsers;
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error);
    throw error;
  }
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° Refresh Tokens ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
 */
async function seedRefreshTokens(users) {
  try {
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Refresh Tokens ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...');
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    await RefreshToken.deleteMany({});
    console.log('üóëÔ∏è ‡∏•‡∏ö Refresh Tokens ‡πÄ‡∏Å‡πà‡∏≤');
    
    const tokens = [];
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á tokens ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà active
    const activeUsers = users.filter(user => user.status === 'active');
    
    for (const user of activeUsers) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á 1-3 tokens ‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
      const tokenCount = Math.floor(Math.random() * 3) + 1;
      
      for (let i = 0; i < tokenCount; i++) {
        const deviceTypes = ['desktop', 'mobile', 'tablet'];
        const deviceType = deviceTypes[Math.floor(Math.random() * deviceTypes.length)];
        
        const deviceInfo = {
          deviceId: require('crypto').randomBytes(8).toString('hex'),
          name: `${user.firstName}'s ${deviceType}`,
          type: deviceType,
          os: deviceType === 'mobile' ? 'iOS' : deviceType === 'tablet' ? 'Android' : 'Windows',
          browser: 'Chrome',
          userAgent: 'Mozilla/5.0 (compatible; SeedDevice)',
          ipAddress: `192.168.1.${Math.floor(Math.random() * 100) + 1}`,
          location: {
            country: 'Thailand',
            region: 'Bangkok',
            city: 'Bangkok',
            timezone: 'Asia/Bangkok'
          }
        };
        
        const token = await RefreshToken.createToken(user._id, deviceInfo);
        tokens.push(token);
      }
    }
    
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Refresh Tokens ${tokens.length} tokens`);
    return tokens;
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Refresh Tokens:', error);
    throw error;
  }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
 */
function displayImportantInfo(users) {
  console.log('\n' + '='.repeat(50));
  console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
  console.log('='.repeat(50));
  
  console.log('\nüîê ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  users.forEach(user => {
    console.log(`\nüë§ ${user.username}`);
    console.log(`   üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${user.email}`);
    console.log(`   üîë ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: [‡∏î‡∏π‡πÉ‡∏ô sampleUsers array]`);
    console.log(`   üì± ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${user.status}`);
    console.log(`   ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${user.isEmailVerified ? '‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà'}`);
    console.log(`   üõ°Ô∏è ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${user.roles.join(', ')}`);
    console.log(`   üîê MFA: ${user.mfaEnabled ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'}`);
    
    if (user.mfaEnabled && user.mfaBackupCodes?.length > 0) {
      console.log(`   üé´ Backup Codes: ${user.mfaBackupCodes.slice(0, 3).map(c => c.code).join(', ')}...`);
    }
  });
  
  console.log('\nüìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  console.log('1. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:');
  console.log('   curl -X POST "http://localhost:3001/api/auth/login" \\');
  console.log('     -H "Content-Type: application/json" \\');
  console.log('     -d \'{"email": "admin@example.com", "password": "AdminPassword123!"}\' | jq .');
  
  console.log('\n2. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå:');
  console.log('   curl -X GET "http://localhost:3001/api/auth/profile" \\');
  console.log('     -H "Authorization: Bearer <access_token>" | jq .');
  
  console.log('\n3. ‡∏î‡∏π‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:');
  console.log('   curl -X GET "http://localhost:3001/api/auth/devices" \\');
  console.log('     -H "Authorization: Bearer <access_token>" | jq .');
  
  console.log('\n4. ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô MFA:');
  console.log('   curl -X POST "http://localhost:3001/api/auth/mfa/enable" \\');
  console.log('     -H "Authorization: Bearer <access_token>" | jq .');
  
  console.log('\n5. API Documentation:');
  console.log('   curl "http://localhost:3001/api/docs" | jq .');
  
  console.log('\n' + '='.repeat(50));
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å
 */
async function seedDatabase() {
  try {
    console.log('üå± ======================================');
    console.log('üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    console.log('üå± ======================================');
    
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await database.connect();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const users = await seedUsers();
    const tokens = await seedRefreshTokens(users);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    displayImportantInfo(users);
    
    console.log('\nüéâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    console.log(`üìä ‡∏™‡∏£‡∏∏‡∏õ: ${users.length} users, ${tokens.length} refresh tokens`);
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
  } finally {
    // ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    console.log('\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB...');
    await database.disconnect();
    console.log('‚úÖ ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  seedDatabase().catch(console.error);
}

module.exports = { seedDatabase, sampleUsers };