/**
 * Database Configuration - Advanced Auth Lab
 * ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Advanced Authentication
 */

const mongoose = require('mongoose');
require('dotenv').config();

class Database {
  constructor() {
    this.mongodb_uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/nodejs-lab-auth';
    this.options = {
      // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      maxPoolSize: 10, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô connection ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô pool
      serverSelectionTimeoutMS: 5000, // Timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å server
      socketTimeoutMS: 45000, // Socket timeout
      bufferCommands: false // ‡∏õ‡∏¥‡∏î mongoose buffer commands
    };
    
    this.isConnected = false;
    this.setupEventHandlers();
  }

  /**
   * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
   */
  async connect() {
    try {
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB...');
      console.log(`üìç Database URI: ${this.mongodb_uri}`);
      
      await mongoose.connect(this.mongodb_uri, this.options);
      
      this.isConnected = true;
      console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      console.log(`üìä Database Name: ${mongoose.connection.name}`);
      console.log(`üåê Host: ${mongoose.connection.host}:${mongoose.connection.port}`);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes
      await this.createIndexes();
      
      return true;
      
    } catch (error) {
      this.isConnected = false;
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB:', error.message);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
      this.showTroubleshootingTips(error);
      
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
   */
  async disconnect() {
    try {
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB...');
      await mongoose.disconnect();
      this.isConnected = false;
      console.log('‚úÖ ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:', error.message);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Handlers
   */
  setupEventHandlers() {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    mongoose.connection.on('connected', () => {
      console.log('üü¢ Mongoose connected to MongoDB');
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î
    mongoose.connection.on('disconnected', () => {
      console.log('üü° Mongoose disconnected from MongoDB');
      this.isConnected = false;
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    mongoose.connection.on('error', (error) => {
      console.error('üî¥ Mongoose connection error:', error);
      this.isConnected = false;
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏û‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏¥‡∏î
    process.on('SIGINT', async () => {
      try {
        await this.disconnect();
        console.log('üëã ‡πÅ‡∏≠‡∏û‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏á ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
        process.exit(0);
      } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:', error);
        process.exit(1);
      }
    });
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Database Indexes
   */
  async createIndexes() {
    try {
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á database indexes...');
      
      const User = require('../models/User');
      const RefreshToken = require('../models/RefreshToken');
      
      // User indexes
      await User.collection.createIndex({ email: 1 }, { unique: true });
      await User.collection.createIndex({ username: 1 }, { unique: true });
      await User.collection.createIndex({ roles: 1 });
      await User.collection.createIndex({ status: 1 });
      await User.collection.createIndex({ createdAt: -1 });
      await User.collection.createIndex({ lastLogin: -1 });
      await User.collection.createIndex({ 'trustedDevices.deviceId': 1 });
      
      // RefreshToken indexes
      await RefreshToken.collection.createIndex({ token: 1 }, { unique: true });
      await RefreshToken.collection.createIndex({ user: 1 });
      await RefreshToken.collection.createIndex({ deviceId: 1 });
      await RefreshToken.collection.createIndex({ family: 1 });
      await RefreshToken.collection.createIndex({ expiresAt: 1 }, { expireAfterSeconds: 0 });
      await RefreshToken.collection.createIndex({ isActive: 1, expiresAt: 1 });
      
      // Compound indexes
      await User.collection.createIndex({ email: 1, status: 1 });
      await RefreshToken.collection.createIndex({ user: 1, isActive: 1 });
      
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á database indexes ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
    } catch (error) {
      if (error.code === 11000 || error.message.includes('already exists')) {
        console.log('‚ÑπÔ∏è Indexes ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°...');
      } else {
        console.error('‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á indexes:', error.message);
        // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á
      }
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
   */
  isReady() {
    return this.isConnected && mongoose.connection.readyState === 1;
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  async getStats() {
    if (!this.isReady()) {
      return { connected: false };
    }

    try {
      const admin = mongoose.connection.db.admin();
      const serverStatus = await admin.serverStatus();
      
      return {
        connected: true,
        host: mongoose.connection.host,
        port: mongoose.connection.port,
        name: mongoose.connection.name,
        readyState: mongoose.connection.readyState,
        version: serverStatus.version,
        uptime: serverStatus.uptime,
        connections: serverStatus.connections,
        collections: Object.keys(mongoose.connection.collections).length
      };
    } catch (error) {
      console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
      return { 
        connected: true,
        error: error.message 
      };
    }
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö testing)
   */
  async clearDatabase() {
    if (process.env.NODE_ENV === 'production') {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô production environment');
    }

    try {
      console.log('üßπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
      
      const collections = Object.keys(mongoose.connection.collections);
      
      for (const collection of collections) {
        await mongoose.connection.collections[collection].deleteMany({});
      }
      
      console.log('‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
      throw error;
    }
  }

  /**
   * Backup ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  async backup() {
    try {
      console.log('üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
      
      const User = require('../models/User');
      const RefreshToken = require('../models/RefreshToken');
      
      const backup = {
        timestamp: new Date().toISOString(),
        users: await User.find({}).lean(),
        refreshTokens: await RefreshToken.find({}).lean()
      };
      
      console.log(`‚úÖ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${backup.users.length} users, ${backup.refreshTokens.length} tokens`);
      
      return backup;
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
      throw error;
    }
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
   */
  showTroubleshootingTips(error) {
    console.log('\nüîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:');
    
    if (error.name === 'MongoNetworkError') {
      console.log('‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MongoDB ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
      console.log('‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö connection string ‡πÉ‡∏ô MONGODB_URI');
      console.log('‚Ä¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ: docker run -d -p 27017:27017 mongo:latest');
    }
    
    if (error.name === 'MongooseServerSelectionError') {
      console.log('‚Ä¢ MongoDB server ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á');
      console.log('‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö firewall ‡πÅ‡∏•‡∏∞ network settings');
    }
    
    if (error.name === 'MongoParseError') {
      console.log('‚Ä¢ Connection string ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      console.log('‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö MONGODB_URI');
    }
    
    console.log('‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏ß‡πà‡∏≤‡∏°‡∏µ MONGODB_URI ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    console.log('‚Ä¢ ‡∏•‡∏≠‡∏á: npm run seed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö\n');
  }
}

module.exports = new Database();