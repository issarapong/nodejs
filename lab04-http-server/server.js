// server.js - HTTP Server ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Lab 4

const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

console.log('=== Lab 4: HTTP Server ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ===\n');

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
const users = [
    { id: 1, name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', email: 'somchai@example.com', age: 28, city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø' },
    { id: 2, name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡πÉ‡∏à‡∏á‡∏≤‡∏°', email: 'somying@example.com', age: 25, city: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà' },
    { id: 3, name: '‡∏ß‡∏¥‡∏ó‡∏¢‡πå ‡πÄ‡∏Å‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≤', email: 'wit@example.com', age: 30, city: '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï' }
];

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const serverStats = {
    startTime: new Date(),
    requestCount: 0,
    visitors: new Set()
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤ MIME type
function getMimeType(filePath) {
    const ext = path.extname(filePath).toLowerCase();
    const mimeTypes = {
        '.html': 'text/html',
        '.css': 'text/css',
        '.js': 'application/javascript',
        '.json': 'application/json',
        '.png': 'image/png',
        '.jpg': 'image/jpeg',
        '.jpeg': 'image/jpeg',
        '.gif': 'image/gif',
        '.svg': 'image/svg+xml',
        '.ico': 'image/x-icon',
        '.txt': 'text/plain',
        '.pdf': 'application/pdf'
    };
    return mimeTypes[ext] || 'application/octet-stream';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå static
function serveStaticFile(res, filePath, mimeType) {
    fs.readFile(filePath, (err, data) => {
        if (err) {
            res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
            res.end(`
                <!DOCTYPE html>
                <html>
                <head><title>404 - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå</title></head>
                <body style="font-family: Arial; text-align: center; margin: 50px;">
                    <h1>404 - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå</h1>
                    <p>‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
                    <a href="/">‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
                </body>
                </html>
            `);
            return;
        }
        
        res.writeHead(200, { 
            'Content-Type': mimeType + '; charset=utf-8',
            'Cache-Control': 'public, max-age=3600',
            'Last-Modified': fs.statSync(filePath).mtime.toUTCString()
        });
        res.end(data);
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á JSON response
function sendJSON(res, data, statusCode = 200) {
    res.writeHead(statusCode, {
        'Content-Type': 'application/json; charset=utf-8',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE',
        'Access-Control-Allow-Headers': 'Content-Type'
    });
    res.end(JSON.stringify(data, null, 2));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á HTML response
function sendHTML(res, html, statusCode = 200) {
    res.writeHead(statusCode, {
        'Content-Type': 'text/html; charset=utf-8'
    });
    res.end(html);
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP Server
const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url, true);
    const pathname = parsedUrl.pathname;
    const method = req.method;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
    serverStats.requestCount++;
    
    // ‡πÄ‡∏Å‡πá‡∏ö IP ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°
    const clientIP = req.connection.remoteAddress || req.headers['x-forwarded-for'];
    if (clientIP) {
        serverStats.visitors.add(clientIP);
    }
    
    console.log(`${new Date().toISOString()} - ${method} ${pathname}`);
    
    // Routing
    if (pathname === '/' && method === 'GET') {
        // ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        serveStaticFile(res, path.join(__dirname, 'public', 'index.html'), 'text/html');
        
    } else if (pathname === '/about' && method === 'GET') {
        // ‡∏´‡∏ô‡πâ‡∏≤ About
        const aboutHTML = `
            <!DOCTYPE html>
            <html lang="th">
            <head>
                <meta charset="UTF-8">
                <title>‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö - Node.js Lab</title>
                <style>
                    body { font-family: Arial; margin: 40px; line-height: 1.6; }
                    .container { max-width: 800px; margin: 0 auto; }
                    h1 { color: #4CAF50; }
                    .info { background: #f9f9f9; padding: 20px; border-radius: 10px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üìã ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Lab ‡∏ô‡∏µ‡πâ</h1>
                    <div class="info">
                        <h3>üéØ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå</h3>
                        <p>Lab ‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô HTTP Server ‡πÉ‡∏ô Node.js</p>
                        
                        <h3>üõ†Ô∏è ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ</h3>
                        <ul>
                            <li>Node.js HTTP Module</li>
                            <li>File System (fs)</li>
                            <li>URL Parsing</li>
                            <li>JSON API</li>
                        </ul>
                        
                        <h3>üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥</h3>
                        <p>‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${serverStats.startTime.toLocaleString('th-TH')}</p>
                        <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ: ${serverStats.requestCount}</p>
                        <p>‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°: ${serverStats.visitors.size} ‡∏Ñ‡∏ô</p>
                    </div>
                    <br>
                    <a href="/">‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
                </div>
            </body>
            </html>
        `;
        sendHTML(res, aboutHTML);
        
    } else if (pathname === '/api/users' && method === 'GET') {
        // API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        sendJSON(res, {
            success: true,
            data: users,
            total: users.length,
            timestamp: new Date().toISOString()
        });
        
    } else if (pathname === '/api/users' && method === 'POST') {
        // API ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', () => {
            try {
                const newUser = JSON.parse(body);
                newUser.id = users.length + 1;
                users.push(newUser);
                
                sendJSON(res, {
                    success: true,
                    message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                    data: newUser
                }, 201);
            } catch (error) {
                sendJSON(res, {
                    success: false,
                    message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                    error: error.message
                }, 400);
            }
        });
        
    } else if (pathname.startsWith('/api/users/') && method === 'GET') {
        // API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° ID
        const userId = parseInt(pathname.split('/')[3]);
        const user = users.find(u => u.id === userId);
        
        if (user) {
            sendJSON(res, {
                success: true,
                data: user
            });
        } else {
            sendJSON(res, {
                success: false,
                message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
            }, 404);
        }
        
    } else if (pathname === '/api/time' && method === 'GET') {
        // API ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const now = new Date();
        sendJSON(res, {
            success: true,
            data: {
                iso: now.toISOString(),
                thai: now.toLocaleString('th-TH'),
                timestamp: now.getTime(),
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
            }
        });
        
    } else if (pathname === '/api/status' && method === 'GET') {
        // API ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        const uptime = Date.now() - serverStats.startTime.getTime();
        sendJSON(res, {
            success: true,
            data: {
                status: 'online',
                uptime: Math.floor(uptime / 1000) + ' ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
                requestCount: serverStats.requestCount,
                visitors: serverStats.visitors.size,
                memory: process.memoryUsage(),
                nodeVersion: process.version,
                platform: process.platform
            }
        });
        
    } else if (pathname.startsWith('/static/')) {
        // ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå static
        const fileName = pathname.replace('/static/', '');
        const filePath = path.join(__dirname, 'public', fileName);
        const mimeType = getMimeType(filePath);
        
        serveStaticFile(res, filePath, mimeType);
        
    } else if (pathname === '/favicon.ico') {
        // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
        res.writeHead(204);
        res.end();
        
    } else {
        // 404 Not Found
        const notFoundHTML = `
            <!DOCTYPE html>
            <html lang="th">
            <head>
                <meta charset="UTF-8">
                <title>404 - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤</title>
                <style>
                    body { 
                        font-family: Arial; 
                        text-align: center; 
                        margin: 50px;
                        background: linear-gradient(135deg, #FF6B6B, #4ECDC4);
                        color: white;
                        min-height: 100vh;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    }
                    .error-container {
                        background: rgba(255,255,255,0.95);
                        color: #333;
                        padding: 40px;
                        border-radius: 20px;
                        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    }
                    h1 { color: #FF6B6B; font-size: 4em; margin: 0; }
                    p { font-size: 1.2em; margin: 20px 0; }
                    a { 
                        display: inline-block;
                        padding: 12px 30px;
                        background: #4ECDC4;
                        color: white;
                        text-decoration: none;
                        border-radius: 25px;
                        transition: background 0.3s ease;
                    }
                    a:hover { background: #45B7B8; }
                </style>
            </head>
            <body>
                <div class="error-container">
                    <h1>404</h1>
                    <p>üòÖ ‡∏Ç‡∏≠‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</p>
                    <p>URL: <code>${pathname}</code></p>
                    <a href="/">üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
                </div>
            </body>
            </html>
        `;
        sendHTML(res, notFoundHTML, 404);
    }
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà http://localhost:${PORT}`);
    console.log('üìã ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log(`   - ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: http://localhost:${PORT}/`);
    console.log(`   - ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö: http://localhost:${PORT}/about`);
    console.log(`   - API ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: http://localhost:${PORT}/api/users`);
    console.log(`   - API ‡πÄ‡∏ß‡∏•‡∏≤: http://localhost:${PORT}/api/time`);
    console.log(`   - API ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: http://localhost:${PORT}/api/status`);
    console.log(`   - Static files: http://localhost:${PORT}/static/demo.html`);
    console.log('\nüí° ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n');
});

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
process.on('SIGTERM', () => {
    console.log('\nüõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...');
    server.close(() => {
        console.log('‚úÖ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('\nüõë ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î (Ctrl+C)');
    server.close(() => {
        const uptime = Date.now() - serverStats.startTime.getTime();
        console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:');
        console.log(`   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${Math.floor(uptime / 1000)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
        console.log(`   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ: ${serverStats.requestCount}`);
        console.log(`   - ‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°: ${serverStats.visitors.size} ‡∏Ñ‡∏ô`);
        console.log('‚úÖ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        process.exit(0);
    });
});